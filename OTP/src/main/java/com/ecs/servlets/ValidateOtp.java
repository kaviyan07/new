package com.ecs.servlets;

import java.io.IOException;
import java.io.InputStream;
import java.util.UUID;

import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.xml.bind.JAXBException;
import javax.xml.stream.XMLStreamException;

import com.ecs.aua.api.ECSAuaInterfaceExApiHelper;
import com.ecs.aua.utils.Base64;
import com.ecs.aua.xsd.ECSKycResponse;
import com.ecs.uidai.response.parser.KycResProcessor;
import com.ecs.utils.SettingsReader;
import com.ecs.utils.Utils;
import com.ecs.utils.XMLUtils;
import com.ecs.xsd.ValidateOtpRequest;
import com.ecs.xsd.ValidateOtpResponse;
import com.google.gson.Gson;

import in.gov.uidai.kyc.uid_kyc_response._1.KycRes;



/**
 * Servlet implementation class ValidateOtp
 */
@WebServlet("/validateOtp")
public class ValidateOtp extends HttpServlet {
	private static final long serialVersionUID = 1L;

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		Gson gson = new Gson();
	    try {
			response.setContentType("application/json");       

	        StringBuilder sb = new StringBuilder();

	        try {
	            String s;
	            while ((s = request.getReader().readLine()) != null) {
	                sb.append(s);
	            }
	        } catch(Exception ex) {
				sendError(response, gson, "Could not read message Body");
				ex.printStackTrace();
				return;
	        }

	        ValidateOtpRequest req = null;
			
			try {
				req = gson.fromJson(sb.toString(), ValidateOtpRequest.class);
			} catch(Exception ex) {
				sendError(response, gson, "Invalid request");
				ex.printStackTrace();
				return;
			}

			//TODO: Validate the request parameters
			
			ServletContext context = getServletContext();
			InputStream is = context.getResourceAsStream("/WEB-INF/settings.properties");
			SettingsReader settings = new SettingsReader(is);

			ECSAuaInterfaceExApiHelper api = new ECSAuaInterfaceExApiHelper();
			api.initialize(settings.getProperty("AUA_APP_ID"), settings.getProperty("AUA_URL"), 
					Utils.getBytes(context.getResourceAsStream(settings.getProperty("PID_ENCRYPTION_KEY"))));

            if (settings.getProperty("SIGN_PFX") != null)
                api.setRequestSigningCertificate(Utils.getBytes(context.getResourceAsStream(settings.getProperty("SIGN_PFX"))),
                		settings.getProperty("SIGN_PFX_PASSWORD"));

            
            
            
           boolean lr = true;
           
		ECSKycResponse kycres = api.getKycOtp(UUID.randomUUID().toString(), req.getAadhaarNumber(), req.getConsent(), 
            	req.getOtpValue(), req.getOtpTxnId(), false, lr);


		KycResProcessor pro = new KycResProcessor();
		String respXml = new String(kycres.getResp()); 
		pro.parse(respXml);
		
		
		//System.out.println(pro.getKycRes().getUidData().getLData().getName());
		
		//System.out.println(esign.getlData().getName());
		  request.getSession().setAttribute("reg_dist", 	pro.getKycRes().getUidData().getLData().getDist());
		  request.getSession().setAttribute("reg_vtc", 	pro.getKycRes().getUidData().getLData().getVtc());
		  request.getSession().setAttribute("reg_Name", 	pro.getKycRes().getUidData().getLData().getName());
		  request.getSession().setAttribute("reg_co", 	pro.getKycRes().getUidData().getLData().getCo());
		  request.getSession().setAttribute("reg_House", 	pro.getKycRes().getUidData().getLData().getHouse());
		  request.getSession().setAttribute("reg_Street", 	pro.getKycRes().getUidData().getLData().getStreet());
		  request.getSession().setAttribute("reg_Lm", 	pro.getKycRes().getUidData().getLData().getLm());
		  request.getSession().setAttribute("reg_Loc", 	pro.getKycRes().getUidData().getLData().getLoc());
		  request.getSession().setAttribute("reg_State", 	pro.getKycRes().getUidData().getLData().getState());
		  request.getSession().setAttribute("reg_Pc", 	pro.getKycRes().getUidData().getLData().getPc());
		  request.getSession().setAttribute("reg_Country", 	pro.getKycRes().getUidData().getLData().getCountry());
		 
		
		if(kycres.isErr())
            {
            	sendError(response, gson, kycres.getErrCode() + "-" + kycres.getErrMsg());
				return;
            }
            
            
            //Store the result in the session object
            request.getSession().setAttribute("KYC_RES", kycres);
            
            ValidateOtpResponse resp = new ValidateOtpResponse();
    		resp.setError(false);
    		
    		response.getWriter().write(gson.toJson(resp));
    		return;
	    }
	    catch(Exception ex) {
			sendError(response, gson, "Server Error");
	    	ex.printStackTrace();
			return;
	    }
	}
	
	private void sendError(HttpServletResponse response, Gson gson, String errorMsg) throws IOException {
		System.out.println(errorMsg);
		ValidateOtpResponse resp = new ValidateOtpResponse();
		resp.setError(true);
		resp.setErrorMessage(errorMsg);
		
		response.getWriter().write(gson.toJson(resp));
	}
	
	
	public static void main(String[] args) throws JAXBException, XMLStreamException {
		
		
		String respXml = new String("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><Resp status=\"0\" ko=\"KUA\" ret=\"Y\" code=\"70d1f98c720c47bface656862f5f6ef9\" txn=\"UKC:OTP:STGCVL0001:20230704002831456:1607752\" ts=\"2023-07-04T00:28:50.131+05:30\"><kycRes>PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PEt5Y1JlcyBjb2RlPSI3MGQxZjk4YzcyMGM0N2JmYWNlNjU2ODYyZjVmNmVmOSIgcmV0PSJZIiB0cz0iMjAyMy0wNy0wNFQwMDoyODo1MC4xMzErMDU6MzAiIHR0bD0iMjAyNC0wNy0wM1QwMDoyODo1MCIgdHhuPSJVS0M6T1RQOlNUR0NWTDAwMDE6MjAyMzA3MDQwMDI4MzE0NTY6MTYwNzc1MiI+PFJhcj5QRDk0Yld3Z2RtVnljMmx2YmowaU1TNHdJaUJsYm1OdlpHbHVaejBpVlZSR0xUZ2lQejQ4UVhWMGFGSmxjeUJqYjJSbFBTSTNNR1F4WmprNFl6Y3lNR00wTjJKbVlXTmxOalUyT0RZeVpqVm1ObVZtT1NJZ2FXNW1iejBpTURSN01ERXdNREExTlRKWFFqaEZRVlJNTlRWTVptbG9SREUyVnpGSFUzWlpMMFp1Wm5GM2NsVXlPRFV4ZFhsWlQwaGpiek0wUkVsQlprZzVZa3hqVEd3MVozVTFWRVJTZVhoUkxFRXNaVE5pTUdNME5ESTVPR1pqTVdNeE5EbGhabUptTkdNNE9UazJabUk1TWpReU4yRmxOREZsTkRZME9XSTVNelJqWVRRNU5UazVNV0kzT0RVeVlqZzFOU3d3TVRBd01EQXdNVEF3TURBd01ERXdMREl1TUN3eU1ESXpNRGN3TkRBd01qZzBPU3d3TERBc01Dd3dMREl1TlN3M01UazBPR1poTkdGaU5HUXhNMlppTnpSaE5EVmhOR0ZoWXpOaE1XVTNNV05sT1RFeE9HTmhaV0ZsTVdZMFlXSmpPR0UwTTJRMFkyUmhPV0UyT1RkbUxHSTBZbUU1TkRKaU1ETTBObVJsTW1NeU5ETTRaREpoTnpZeFlXWXlNV05qWVRJeE1EWm1OekppWVRZMFpHRXhZbU5oTmpSaU16YzRNalEwWVdJeVpUWXNZalJpWVRrME1tSXdNelEyWkdVeVl6STBNemhrTW1FM05qRmhaakl4WTJOaE1qRXdObVkzTW1KaE5qUmtZVEZpWTJFMk5HSXpOemd5TkRSaFlqSmxOaXhPUVN4T1FTeE9RU3hPUVN4T1FTeE9RU3hPUVN4T1FTeE9RU3hPUVN3c1RrRXNUa0VzVGtFc1RrRXNUa0VzVGtGOUlpQnlaWFE5SW5raUlIUnpQU0l5TURJekxUQTNMVEEwVkRBd09qSTRPalV3TGpBME5Tc3dOVG96TUNJZ2RIaHVQU0pWUzBNNlQxUlFPbE5VUjBOV1REQXdNREU2TWpBeU16QTNNRFF3TURJNE16RTBOVFk2TVRZd056YzFNaUkrUEZOcFoyNWhkSFZ5WlNCNGJXeHVjejBpYUhSMGNEb3ZMM2QzZHk1M015NXZjbWN2TWpBd01DOHdPUzk0Yld4a2MybG5JeUkrUEZOcFoyNWxaRWx1Wm04K1BFTmhibTl1YVdOaGJHbDZZWFJwYjI1TlpYUm9iMlFnUVd4bmIzSnBkR2h0UFNKb2RIUndPaTh2ZDNkM0xuY3pMbTl5Wnk5VVVpOHlNREF4TDFKRlF5MTRiV3d0WXpFMGJpMHlNREF4TURNeE5TSXZQanhUYVdkdVlYUjFjbVZOWlhSb2IyUWdRV3huYjNKcGRHaHRQU0pvZEhSd09pOHZkM2QzTG5jekxtOXlaeTh5TURBd0x6QTVMM2h0YkdSemFXY2pjbk5oTFhOb1lURWlMejQ4VW1WbVpYSmxibU5sSUZWU1NUMGlJajQ4VkhKaGJuTm1iM0p0Y3o0OFZISmhibk5tYjNKdElFRnNaMjl5YVhSb2JUMGlhSFIwY0RvdkwzZDNkeTUzTXk1dmNtY3ZNakF3TUM4d09TOTRiV3hrYzJsbkkyVnVkbVZzYjNCbFpDMXphV2R1WVhSMWNtVWlMejQ4TDFSeVlXNXpabTl5YlhNK1BFUnBaMlZ6ZEUxbGRHaHZaQ0JCYkdkdmNtbDBhRzA5SW1oMGRIQTZMeTkzZDNjdWR6TXViM0puTHpJd01ERXZNRFF2ZUcxc1pXNWpJM05vWVRJMU5pSXZQanhFYVdkbGMzUldZV3gxWlQ1alNteExObEJxVEUwcllqWjZWMDlUZUVaTFdFczVUREphYWpRM05scE5VakZRY3poNVVITmhSMU5aUFR3dlJHbG5aWE4wVm1Gc2RXVStQQzlTWldabGNtVnVZMlUrUEM5VGFXZHVaV1JKYm1adlBqeFRhV2R1WVhSMWNtVldZV3gxWlQ1eGNrNWxWRnAwV2pNNGQyeHpZamMxZUZGdlUySkVZMEZIT1ZGb1ozRTBRVkZuU0djM1YxVmpSWEZNZVhCWGFGUnZhbTVUUWl0MVR6bE5aazlQUkc1SE5qZ3ZjVFk0YUc1MmVtczBDbnB5YmtGQ1JFNVNNVXRUYkUwNE9USm9lRXczT1VwVGNsSjZiRk5DTmsxV1RtaHBhbmN3VEZBeWMwMHJOVkF4TkdNeFVDOUlUREJMWVROa1RXaHJPRGhRT1VwNVZta3JhblJ2UkZNS2RGSk5RU3RDV2xWcGIwSjZia2xrWm5Gb1ZDOVdUMEZ2Vm1WMk5HUkRTSGx3VFUxT1lXaHpTbWhhUmxaT2NtZERTMnhoUTFsQlRUUlJSamMyT1ZSUlNIRXlMM1ZsVTJ3eE5tWXhWZ3BZTm5OTVMyUjBRWEJUWjBKREt6TTJPVEJ2ZEVaNGMweG5iRzh2UkdaMVZFNW9aMmRDVW1odmNFMHlTVWRsVVU1MllYZzFVMEpYYldzdkx6Sm1ibmxvVXpOVWVVbHJNRVk1WkVoTUNrRnpZbXRVVW5CTVIybFZSSGxETUdoSVMxaGFZaTlRYm5GSFF6ZEdSbWxzZDJKMk1VRlJQVDA4TDFOcFoyNWhkSFZ5WlZaaGJIVmxQand2VTJsbmJtRjBkWEpsUGp3dlFYVjBhRkpsY3o0PTwvUmFyPjxVaWREYXRhIHRrbj0iMDEwMDA1NTJXQjhFQVRMNTVMZmloRDE2VzFHU3ZZL0ZuZnF3clUyODUxdXlZT0hjbzM0RElBZkg5YkxjTGw1Z3U1VERSeXhRIiB1aWQ9Inh4eHh4eHh4NjY3MCI+PFBvaSBkb2I9IjE2LTA1LTE5OTYiIGdlbmRlcj0iTSIgbmFtZT0iTXV0aHVrdW1hciBLYW5uYW4iLz48UG9hIGNvPSJTL086IEthbm5hbiIgY291bnRyeT0iSW5kaWEiIGRpc3Q9Ik5hbWFra2FsIiBob3VzZT0iMTQiIHBjPSI2Mzc0MDgiIHN0YXRlPSJUYW1pbCBOYWR1IiBzdHJlZXQ9IlZBUlVUSEFOIFNUUkVFVCIgdnRjPSJSYXNpcHVyYW0iLz48TERhdGEgY289IlMvTzog4K6V4K6j4K+N4K6j4K6p4K+NIiBjb3VudHJ5PSIgIiBkaXN0PSLgrqjgrr7grq7grpXgr43grpXgrrLgr40iIGhvdXNlPSIxNCIgbGFuZz0iMjAiIG5hbWU9IuCuruCvgeCupOCvjeCupOCvgeCuleCvjeCuleCvgeCuruCuvuCusOCvjSAg4K6V4K6j4K+N4K6j4K6p4K+NIiBwYz0iNjM3NDA4IiBzdGF0ZT0i4K6k4K6u4K6/4K604K+NIOCuqOCuvuCun+CvgSIgc3RyZWV0PSLgrrXgrrDgr4HgrqTgrqngr40g4K6k4K+G4K6w4K+BIiB2dGM9IuCuh+CusOCuvuCumuCuv+CuquCvgeCusOCuruCvjSIvPjxQaHQ+LzlqLzRBQVFTa1pKUmdBQkFnQUFBUUFCQUFELzJ3QkRBQWdHQmdjR0JRZ0hCd2NKQ1FnS0RCUU5EQXNMREJrU0V3OFVIUm9mSGgwYUhCd2dKQzRuSUNJc0l4d2NLRGNwTERBeE5EUTBIeWM1UFRneVBDNHpOREwvMndCREFRa0pDUXdMREJnTkRSZ3lJUndoTWpJeU1qSXlNakl5TWpJeU1qSXlNakl5TWpJeU1qSXlNakl5TWpJeU1qSXlNakl5TWpJeU1qSXlNakl5TWpJeU1qTC93QUFSQ0FESUFLQURBU0lBQWhFQkF4RUIvOFFBSHdBQUFRVUJBUUVCQVFFQUFBQUFBQUFBQUFFQ0F3UUZCZ2NJQ1FvTC84UUF0UkFBQWdFREF3SUVBd1VGQkFRQUFBRjlBUUlEQUFRUkJSSWhNVUVHRTFGaEJ5SnhGREtCa2FFSUkwS3h3UlZTMGZBa00ySnlnZ2tLRmhjWUdSb2xKaWNvS1NvME5UWTNPRGs2UTBSRlJrZElTVXBUVkZWV1YxaFpXbU5rWldabmFHbHFjM1IxZG5kNGVYcURoSVdHaDRpSmlwS1RsSldXbDVpWm1xS2pwS1dtcDZpcHFyS3p0TFcydDdpNXVzTER4TVhHeDhqSnl0TFQxTlhXMTlqWjJ1SGk0K1RsNXVmbzZlcng4dlAwOWZiMytQbjYvOFFBSHdFQUF3RUJBUUVCQVFFQkFRQUFBQUFBQUFFQ0F3UUZCZ2NJQ1FvTC84UUF0UkVBQWdFQ0JBUURCQWNGQkFRQUFRSjNBQUVDQXhFRUJTRXhCaEpCVVFkaGNSTWlNb0VJRkVLUm9iSEJDU016VXZBVlluTFJDaFlrTk9FbDhSY1lHUm9tSnlncEtqVTJOemc1T2tORVJVWkhTRWxLVTFSVlZsZFlXVnBqWkdWbVoyaHBhbk4wZFhaM2VIbDZnb09FaFlhSGlJbUtrcE9VbFphWG1KbWFvcU9rcGFhbnFLbXFzck8wdGJhM3VMbTZ3c1BFeGNiSHlNbkswdFBVMWRiWDJObmE0dVBrNWVibjZPbnE4dlAwOWZiMytQbjYvOW9BREFNQkFBSVJBeEVBUHdEckFPS1dseFNWcVlCaWdpbG9vQVNreFRzVVVBUnNPYzAzY0IxcEpaQWlrazRGY2ZyUGpiVDlQbGFKQzl6S01nckVSaFQ3a24rV2FUZGdSMXIzS3IxTlEvYWxVSEdmWGs1cnltNzhlNnBNemVUSERBcDZZWGNSK2ZINlZRUGkvVzJRcjl0YkI2bll1ZTN0eDA3ZXRUY3JsUFlqZDllT2xORjVrMTRmTHF0L1BqemI2NWt4eU44ckhCL0UrNXFTRFY5UmdrTHgzc3dZOWZuUFAxb3VQbFBjNDdnTlU2c0Qwcnl6UWZHc2tMaUhWR1oweHhNQmtqNmdkUjc4bjYxMzFucUVOMUVzc0VxeXhub3luSW91VFkyQWFVOUtyeHpCandSVXU3TlZjQndwcHBjOFUwMEFJYWFUUVRUQ2FCRjJpaWltQUNsTkdLRFFNU21TTnRGUHJEOFNheERwTml6dElvbFlFUnBubGovOWIrbzlhQkhPZU12RXh0a2F3czVRSjJINzExSnpHdU94SGMvbVB4QnJ6U1RibkJZOWFtdkxxUzRuZWFSc3M3Ym1QcWFwUEp1NDdWbTlUVkt3TXBZbkhPS2JqSGM0cFFkcEIzY2lsRG8zR1JuME5BeE1sUUFSZ0hvYUMyT3ZVVTR0dEJVajVlb3FGNHkzSU9hQUpoTUNNRTgxcDZYcmwzcFUyKzJsK1VuNW8yNVZ2cUs1OXR5dHp4VDBjajNvQ3g3TDRiOFJSYW5hRXN3U2FNZ09wUHI2VjFFY21SWGdObGVTMjB3bGljSTJNWjZqRmUyNmRkaTV0WVp0cklYUldLc09Sa2REVFJEVmpXQnlNMGhOUmc4VVpxaVJTYzAyak5GQUY2aWp0UlRBV2cwVTBzS0FGSFd2TVBpUjlyVy90bGxaV3Q5aDhyQ2dFZE53L2w2ZnBYcG03bXZNUGliYmxkU3NwdzR6SkN5bGY5MDV6LzQvK2xKN0RXNXdFamtzZW9xTXR4VXFvOHI3UU9LdlI2YURHV2tZQWVwNjFtNUpHeWkyWTViSGVtWkpQdlY2YUJWZkNBa2V0UXJibGprVVhGWWlFaHhnbk9LY1dQVmVSVHpBcWc4OGlrV0F0eUtMaFladTN0Um5ERWRCOUtrTU94dldtTXBESDBvdUZtT1JzSHJYcW5nM1ZKTDZ6VlpUdVpSZ0U5ZVAvcllyeWxRY2owcjBINGRlWTAxejh4RWFCY0RucWM5UHlQNlUwVExZOUhVL0tLTTBnNlV0V1ppZzBoNjBvb29BdkNnbWlveWVhRU93OHQ2VXpOSm5pa0p3S0JvWE5jVDhTYkh6OUd0N3RJOHZieTRaaC9DakRCei9BTUNDQ3V6TGRxNXp4bmZXdHZvTXR0Y0s1TnlyTEh0VGNGWURoaWVnd1NQZjBIQm82RFI1bHA4SThneU53Q2VNMW9mWnZPVEhRZHFnK3htUzJnVU50VUlEK1ByVVVxWFZzTnFYS2tlNXJuZXJPaU9pMkNYU3l6SG52VFA3UFlEQUZFT296aDhQZys5YUNYaXR4aXBkelJXWmsvMlVTM0lOTmt0SGo0QzhDdFY3eU5NOVByV2ROcU85c0loWSsxQ3V5V2tpazBaNTRxQ1NNN1Nhdk5MS3c1aEkrdE5VZWNHUXJnNHFsZEdic1ppbkpHYTlkOEMyZ2g4T3d5QlFESzdPVDY4NEg4cThvaWdkN2xZVkFNak9FVUhqSkp3SzkxMHVDSzFzSWJhRWZKRWdRZmhXMGRUR1d4Y29wY1VocXlBQjVwMU1GT3pTWUZvdDJwbWVhVTB3bm1rV0xrMHdrMDRjMG5lbUFtZUs1YngvRzcrSFk1RlVrUTNLdS9vQVVkY244V0EvR3VxUFNzanhURUp2REY4cEp3RURuSCt5d2IrbEZ0QnJSbm5rd0RaanlWR01ERlVOUnRSTGFRUXBEQWhpWm1hVVpEdmtqZyt2NSttTWQ5U1NJUDdHcTdoMTR5RDlhNWVhek92bHVqTGpnT0lrRVlVSU1NMlB2YzFvZVlGaEtvaThkelVpaGVTL1lacGdpZVpDVlZnUHBTazdqakd4bHpwbVQ1aHg3VkVpYlVjQXVKUDRkcllIK2Y4QVB2V2hjVzdSTU1qT0IyNXB3aFIxREFDcWk3R2JXcFFKZlk3QjNCTG5ZamtNUXZ1Y0RKL3pnVkxGSElmbVlDcnlXeUU1RWExSklxeHBqSXBOM0MxaklRTkJxZ21RN1NtSEJ4bm12Vi9DbHpOZmFGYjNNLzhBckgzZysrR0svd0JLOHYyU1NhaEhIRW05NUFFVmNnYmlUZ0RuanJpdllkRzAxZEswcTNza2JkNWFuYzNxeEpMRWUyU2EycDN1WXp0WXVFVW1LZVJ6VGNWcXpFYmlqRkxSU0dUTjFOTkhlbk4xTk5BNTZVaWdIRkhTaWcwME1UdHpXWDRpS2Y4QUNQWCsvd0M3NUxkcy9TdE0xVDFTME45cGx6YTUybVJDQWZmdFRBODJ0N2xKNFVsUGNjK3hwWlNwT1IzckF0THRvY3FjNFBZOXExV21QMll1bkp4eFhMS05tZFVKWFFyeStVMjRCVHh3RzZVMWRUSVFxTGhXWTRPRlRidHgrTlpnZmU0KzBGem5vQU9LVXgybzVVa0VmblQ1UmM3NkVuMmlYemNySU1uK0hHYXRRRWtaYkhYdFdhNndBZkx1ejZnMUg5cFpPSTJiSTdHamtRbk45VGJlVFpWT1dYTGNtcTYzRE9nSnF2TlAxNXBjdXRnYjB1ZE40S2hTOThVaDNCS3dSbDFHT004RG44eitPSzlZVVY1cDhNSWZNdnIrYy9kalJCMDdrbnYrQi9QNlY2YVBwWFJGV1J6UzFZMGltRVlxUTFHL1dxRlliU1VFMFVoRXpkYVNudFRhUllVaHBhUTBBSWNVaEdPYU1BMEhpbmNaNUQ0eTBaOUoxdVNaVlAyYTZacFl5T2dKT1dYOENmeUk5NnpMUzlWSWlqSDJyMTdXdEl0ZGMwOXJXNlZzWkRLeWZlVWpQSS9NOWZXdkdOU3NwdEx2NXJXY0F0RzVYZU9qWTdqNjlhaVN1T0xhTnVKWTNoRzNrK3RSU1hteDlqMis0ampPMEdzbTF2bnR6amtnMVlsMVVNT0ZGUmF4cnpLeExQZU5KOHNWdnNQY2hmNjFYMjhFeWRUVEJxVDlTQUZQb0tyelhaZklIRkRURmRiajJrQWpJVTk2cTh1K0FDU1QwRk55em5BQlAwcnNQQWVtUVNhNmtsM0dKR2pqTWlLUmtBZ3JnL2htcVNTSWJ1ZDk0TjBOdEYwQkVtVUM1bWJ6SkJnZkxub3VmWWZxVFcvMzVwZDJWRkozclF6QTFFMmMxSWFZMUFobEljMHRIYWdDdzNUTk5wNXB2YXBMRXhtbHFHVzZpaUh6Tno2Q3N1NjFobERGZmxBOU9hem5WakJYa3lsRnZZMW5kWTEzTVFCV1RxT3ZXMWxHR1oxR2NnRTk4Vm1TWGt0eEN6N2lNanJua2U5YzM0MWkvZmFkdHpzMk9DQjB6a0grdGNuMTJNNThrVFpVV2xkbTdKNDN0bEh5WmtQVDVGUDljVnpPb05GckZ4Sk5JcHhJZHd6MXJLUk9SVjZ5eUxhTUU1S2phZnFPSzNjbmJWampCWE1PK3NKTEorQVdqNmhzVlFmQUZkbWRycVZkUVFlRFZDNDBLR1Z0OFJ4N0NxVlR1S1ZIc2N3SEdLbGlna21Jd0RnOThWcW5SaEU1WS9NUFExTWlMSHh4eDJGRHFkaUZUZlVpZ3RFZ1hPT2ZXdGpROVFUVHRSV1Z4OGpEeXlRT21TT2Z6QXJQWWswd2pHQjNKRlFucmN0clN4NnJiNjlETnhHOGNnSFhZNGIrVmFrVndrcWdxd3J6SHcvYnRKcTZ6Zk1GaVJtSkhRazhBSDhDVCtGZFdzeGpZbEdLNE5aU3hzYWRUa21SN0p0WFIweFlVMG5OWTBXcHlML3JQbUhxS3Z3M2NjdzRibXV1RlNNMWVMTW5GcmNzVVVaelJXaEkrYTRTRWZNZndySnVyOTI0KzZ2b0tpdUptSkp6ayt0WjhyOTY4ZkVZL3dDelRPdUZIdVBrdUdZOEdvVXlwNTVIZWtLK1lnSVB6Q21xN0JpcCs5NlY1YzZzcDZ0blRHTmlTU0FLZk1UL0FGYmNNS3JhN1l2cUdnbGtCYWUyTzhBRGxzY0VmbGsvbFdoQzZ0bFQwYXBZc3dTRTlWSStiL0dzNDFuQ1NmVkY4dDFZODV0blZpTTQrdFdyY2lPU1JPQUNkeS9qL3dEWHpXcnJmaHgwZDd6VFUzb2ZtZUZlbzkxL3cvTDByRGhuRE9wSjRJS2tlL2IrdjUxNzlHdkN0SG1pWU5PTHN5OWxjZWhwak9RT0Rpa1YxTFlwR1VFa1ZveGxTZG5ZNExjVXhWd01tckRSWmFtVEp0QVVEbWk1TGlSamswc2E3cEM1T0ZYakovV3BsdG5FWEFMTzJBcWdaSko0RmRIcEdoZlpnazEzZ3lyZ3JIbklVK3A5VCtnNjg4WXhyVjRVWTgwaEtMazdGblNMRTJOaVRJb0UwcHk0N2owWDhQNWsxZXhoTW1ubGNuSjRBNlVCTWl2QXFWWE9UbExxYjh0bFpFU3FmeHA0QkI1SkI5UlR3bUtmdERDcXAxNVFkNHNVb0tTc3lTSzlsaCsvOHkrdGFNTjRrbzRJejZWazR4MHBwWEIzSWRyZnBYczRiTWxMU29jbFNoYllsa2lZbGdEempwV2VUa0VHdENkL0t1MVBhcWR5bXlZNEhCNXJ3K2U1MjJHeHFRZHZVSHBVMHNBa1VFY01POU5nR1NENlZZVnZuMm5GWnlidm9Va1ZSSEl2T000cTJqaGpnNUJxVUlDU1FPYVVJRzZnWnFYSys0N0RWVm96bFJ3ZXE5dncvd0FLeWRhMFcwdklaYmlPRWk2VWJzeDhNK094K3VNWk5icXJTTW9ZWVBTcXAxcFU1YzBRYVRWbWNTbmhtNGZaTGFYY00wTEx1RE5sU1FlbUFNZzl1Y2lnYUxxVzQvNkczSC9UUk9mL0FCNnVrc2o1VWsxcWVERTN5ZzQrNGVWeGpISFVmOEJxOEYzZi9xcnVsbU5hRXJhTkVLQ2FPT2owWFVKSk5yVzNsY2ZlZVJTUC9IU1QrbFc3ZncwU3dlNm1HZjdrUTQvNzZQOEFMSDQxMHdRRTgxUzFhN21zTE1UVzhBbVlPZ1pTY1pVc0FjZEJubmlsOWZyMVdvUnNyZzRKSzdLOEZyQkhkbElJd2lRZmV4emx5RGpMWnp3cFBCL3ZqSFNyNEdPdFIya01pd3I1eDNTdDh6bjNQSng3ZWc3REZUZnhDdVN0VWNwV3ZldzB0QnBWZTlKakhROFU1aFRhenVPd1U0QWdlOUlvSEZQeGdjOUJTdU1iaW1NS1ZYeXg3SDFwempDTDZtdEZLeExWeUs5K2RGa0hjVkM3ZWJieHYzSEJxU1JnOEJ4MDdlMVEyeExXMGkvM1dCL1Avd0RWUXRoazBBd0RtcE1aWUh2VVlPMUFCVmlCQ1V5YWh0Z2lWZW9xVUxta1VVL0dLZ29ROFV3blBTbFpzbkFwQlFCVXVnMGMwTXFBbm5ZNEI3TjBPUFVISDBCYXJJY0NNTlNYRWFUUVNSeUtHUmxLc3A2RUhyV1JOcXNObmJEN1ZMbVJHOHRnQmxtSTV6Z2NESXczdG5GYnhnNmtVbzZ0RTNzelpYa1pGVVd6ZFg2cVA5VkJ5M1g1bkkva0FmY1pQcXRWVThRVzExYkg3SWQwK1FnUndSaGowejdjRThkZ2F2MmFyQkNFWGs5eVFNc1R5U2NkeWNuOGFmSktrbTVLekM2Wk9QdkhpbXNNVTljNXpUWk90YzR4akE0cGhCcWFQREExR3d3MU1CRjYwOStJelRCOTZpWnZtQzB1b2RDQWtBNXFhUSt2UlJWUnVaZ29QVnFrdUpQbUtqcG5tdE9XN0YwSWc0RE5HZWg2VWxua1N6cGpqYnUvWC82OUpjcGtlWXB3ZldsczIzU1BJZXBqSVAxeUt0YW9aTDFhdENJWVVWUmo1Y1ZweHA2MWhJRU9VWUhOVjNteWRxMURxYzdtMG5XQmlHMk1Bd1BRNHJtL0RGOU0ycWVSUE5KSUpWTzBPeGJCSFBmcHhuOUs2YU9HbFVoS2E2RVNxSlNTN25Xb21GeWU5TmVTTVNDTXVvY2pJWFBKL0N1T0YyOWpxMnN6eC82eEZtVlR4d1RPaWcvaG5OUlJhUTl4b3N1cE5jZk1kemJTQ1NRRHlTYzllRC9rOGRLeTlMM3B5c3RPblZrZTI2SkhZWEZ6RkJIbVdWRUJIQlpnTTF5T3RCTDZkSHRIZ25rNVVxc28zRWRSZ1o1Ny9uVks4dlpyelM3VHpXTE5GSkxIdUo1WVlqSUovUEZXZFgwaUxUSTQ1YmVhWGNYd2R4SDRFRVl4MHJxdytGV0htbTVlOHpPVlZ5V2kwSjlBc1h0TG1iN2JKRkRjTVZWWXpJTnh6Zyt1T2NyZ2RhNnNCTGVNdks2b282c3h3QlhJNnhLMFd2VFNwamNwamNBZE0rV3BGYS9pYTVqYlRJRlNUSmxrM2ovYVVBLzFLMUdMb1NxMUlOdjR2d0toTlJUOGpiaW1qbFhNVG82ampLa0VVeHA0bWw4c1NvWDZiZHd6V1A0WmtXTFNaWlpHMm9zek16SHNBcTF6ZGcwc041YVhFanR0RXFocFQzd1J1L1EvcldNY3ZVcHpqemZDTjE3Sk8yNTI3WFVNRXlvODBhU05qQ013Qk9UZ1lIMXFkd0dRTU9hNXJXNHovd0FKSHBqK3NrUVAwRW1mNjEwc1JMQmxQYXVPclI5bkNNNzdtc1pjemE3RWVjTU05S2htYjU4NTRxWnh6aXFzN1kvQ3M0TFViSy9tQVhPZjdwSm9WaTJTVHllYXFNK1o1TzN6RWZyVmlKdWMrblN0MnJDSklaTjZHTnV0TXRjdzNVa1IvaVU0b29xZTVSbzJ5NWtxZTl1ZkpqMkw5NXFLS3dXc2c2RWNkdVRDcU1PV09TUHJYSTZhcldrMXJmYnRrWW5FYnVlaWpqUDZFMFVWNm1YTzhablBXM1JIZW4vVDliSko2TngvMjhSMXIyWno0TllEL25sTC93Q2hOUlJYYmlmNGE5VVpVOTM2TTVkempUWUI2M0V4L3dESFlxdjNkOWRhdGVXdHZJZ3QwZHh0eUQzT00rLzZVVVYxU2ltN3RhcTVtbTl2UXNhMUVKTmR1NG93QmhBVnoyQ3hLMlBmaFNLYmYzRFhlbTZmQ1ZBa2d0WlpBY2RWWGNNZmxGUlJXVk4zaEZ2b3YwTkh1MFd0UGtTUHdsZjd4bFhaNC84QXZwVlgrdFpzdG8vOWhXODdOOGh1SkFxbnZ1VlIvd0MwelJSU2k3VkpXNnlYNUV2NFY2R2xyOXkwamFWZUtOcnV2bUFlbWRwL3JYU1J1Rm5Ib1JSUlhsNDFKVTRyMS9NNmFUOTUvSXBYVHRIZEg1aUFUVFhiZ2Vob29ybFd5TGU1bmx3enN5OXlUVm1NWVFZL09paXRKRGV4LzlrPTwvUGh0PjwvVWlkRGF0YT48U2lnbmF0dXJlIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIj48U2lnbmVkSW5mbz48Q2Fub25pY2FsaXphdGlvbk1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnL1RSLzIwMDEvUkVDLXhtbC1jMTRuLTIwMDEwMzE1Ii8+PFNpZ25hdHVyZU1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNyc2Etc2hhMSIvPjxSZWZlcmVuY2UgVVJJPSIiPjxUcmFuc2Zvcm1zPjxUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjZW52ZWxvcGVkLXNpZ25hdHVyZSIvPjwvVHJhbnNmb3Jtcz48RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8wNC94bWxlbmMjc2hhMjU2Ii8+PERpZ2VzdFZhbHVlPnl6QUY1bWNNMTZZLzNPdDF0YWlFRWdLV1c1aG1qYUQ0SkF1NTNHU0RuMVE9PC9EaWdlc3RWYWx1ZT48L1JlZmVyZW5jZT48L1NpZ25lZEluZm8+PFNpZ25hdHVyZVZhbHVlPmlkdEhDcUM1bnRRMVVSRHd5MWZaY29MMWxVc1ltZ1VyV2hkVFV0cGhOS2orcW9NRitQNnhLZG5nMDhyN0VzckFUbUQ2TUtRQi8zUGMKS2J5SzV6bzYyNlF3ZG1VN3RlRFdnTUFuMWV1TW1IVTl4UU5hZlcvelNVMDd4aTg3YlVrZUpDZm9oQmF5YmQxbXFaN2FGNHRQaEtDaQpIK3BqeXdCU0xmbklPSG1CelVRTElpK3ppTFJqdVV2UlpPVUxqRzNjbEhwNXBkOTBSS1RhSTJHZzErQWtpV2F5STJzNHB6M0lYUFV5CmRXRXV0bXIrL3FzTzhCLzdTeFNCN0ZqZHBVZmpwektSdDJ4UFppeWhyZDZBVEpqRElhckRxTUhqUUxqTEFVY3dZcUozRlU5VUlubzYKSTV5akRwTTE5R0JiSVlNcTdPT1cweE1pMHU4cWVQUmxVd2h0UEE9PTwvU2lnbmF0dXJlVmFsdWU+PEtleUluZm8+PFg1MDlEYXRhPjxYNTA5U3ViamVjdE5hbWU+MS4yLjg0MC4xMTM1NDkuMS45LjE9IzE2MTY2MTY0NjE3NTc0NjgyZTc0NjM0MDc1Njk2NDYxNjkyZTZlNjU3NDJlNjk2ZSxMPUJhbmdhbG9yZSxDTj1VSURBSSxPPVVJREFJLE9VPVRlY2hub2xvZ3kgQ2VudHJlLFNUPUthcm5hdGFrYSxDPUlOPC9YNTA5U3ViamVjdE5hbWU+PFg1MDlDZXJ0aWZpY2F0ZT5NSUlGdHpDQ0JKK2dBd0lCQWdJR2Y4QXBhWGgwTUEwR0NTcUdTSWIzRFFFQkN3VUFNSUhoTVFzd0NRWURWUVFHRXdKSlRqRW1NQ1FHCkExVUVDaE1kVm1WeVlYTjVjeUJVWldOb2JtOXNiMmRwWlhNZ1VIWjBJRXgwWkM0eEhUQWJCZ05WQkFzVEZFTmxjblJwWm5scGJtY2cKUVhWMGFHOXlhWFI1TVE4d0RRWURWUVFSRXdZME1EQXdNalV4RkRBU0JnTlZCQWdUQzAxaGFHRnlZWE5vZEhKaE1SSXdFQVlEVlFRSgpFd2xXTGxNdUlFMWhjbWN4TWpBd0JnTlZCRE1US1U5bVptbGpaU0JPYnk0Z01qRXNJREp1WkNCR2JHOXZjaXdnUW1oaGRtNWhJRUoxCmFXeGthVzVuTVJ3d0dnWURWUVFERXhOV1pYSmhjM2x6SUZOMVlpQkRRU0F5TURJeU1CNFhEVEl6TURVd016RXlNakkwTUZvWERUSTIKTURVd016RXlNakkwTUZvd2daZ3hDekFKQmdOVkJBWVRBa2xPTVJJd0VBWURWUVFJRXdsTFlYSnVZWFJoYTJFeEdqQVlCZ05WQkFzVApFVlJsWTJodWIyeHZaM2tnUTJWdWRISmxNUTR3REFZRFZRUUtFd1ZWU1VSQlNURU9NQXdHQTFVRUF4TUZWVWxFUVVreEVqQVFCZ05WCkJBY1RDVUpoYm1kaGJHOXlaVEVsTUNNR0NTcUdTSWIzRFFFSkFSWVdZV1JoZFhSb0xuUmpRSFZwWkdGcExtNWxkQzVwYmpDQ0FTSXcKRFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU82N0hCa0szNFFBNnl6Q21iUThMSHhKRlphbGdQWG1hT0ZQODd1NwpOZWdYTXdNM2t2RU1xK295THY0cjMyQmpFTTBacUVkVHRtaW56TG9pbCt6WHZKNzZMOTVVZkh2NHFEQkc2TXNJd01ja2t3dENpdmpPCmNrNkNMYXJNN21MNGZDNlc0NTIyeGVjb2hNQUFURkNDS3FoOHZzZ0I1eE1kYnZNSmw4anBNYzhOUnVqSzF1bGFEVm9HOVFNNjV3RW4KU0RNU0FQWVg3aStWWTlPRTVpbmRadU1mbXRlRCttR0xrd0pRbTNaMEdrRTloVThlRjNqekhEMG1WMlR0c1VnUzBxK2VCNnErbXRKZQpzb05McGtMYlNSMGJmeXYvM1BXL2dxV21PMGxlbjFNZjZMRUsxbkgwa2grVUgxSXl3N3Nib1JMOXd2a1RXdVFwWjBrSXRhajZkZlVDCkF3RUFBYU9DQWJvd2dnRzJNRUFHQTFVZEpRUTVNRGNHQ2lzR0FRUUJnamNVQWdJR0NDc0dBUVVGQndNRUJnb3JCZ0VFQVlJM0NnTU0KQmdrcWhraUc5eThCQVFVR0NDc0dBUVVGQndNQ01CTUdBMVVkSXdRTU1BcUFDRTB1V09HRkxmNktNSEFHQ0NzR0FRVUZCd0VCQkdRdwpZakFnQmdnckJnRUZCUWN3QVlZVWFIUjBjRG92TDI5amMzQXVkbk5wWjI0dWFXNHdQZ1lJS3dZQkJRVUhNQUtHTW1oMGRIQnpPaTh2CmQzZDNMblp6YVdkdUxtbHVMM0psY0c5emFYUnZjbmt2ZG5OcFoyNXpkV0pqWVRJd01qSXVZMlZ5TUlHTEJnTlZIU0FFZ1lNd2dZQXcKZEFZR1lJSmtaQUlETUdvd0x3WUlLd1lCQlFVSEFnRVdJMmgwZEhCek9pOHZkM2QzTG5aemFXZHVMbWx1TDNKbGNHOXphWFJ2Y25rdgpZM0J6TURjR0NDc0dBUVVGQndJQ01Dc2FLVU5zWVhOeklFbEpTU0JQY21kaGJtbDZZWFJwYjI0Z1UybG5ibVZ5SUVObGNuUnBabWxqCllYUmxNQWdHQm1DQ1pHUUNBakF2QmdOVkhSOEVLREFtTUNTZ0lxQWdoaDVvZEhSd2N6b3ZMMk5oTG5aemFXZHVMbWx1TDJOeWJHUnoKWXpJd01qSXdFUVlEVlIwT0JBb0VDRXB6bE93QjVHbmdNQTRHQTFVZER3RUIvd1FFQXdJR3dEQUpCZ05WSFJNRUFqQUFNQTBHQ1NxRwpTSWIzRFFFQkN3VUFBNElCQVFCMU5nK2JlaUE3OTIzVDVRL3lFTTNKa01VTmJXZlRQeTFubFhIdTN0OE81SUNBbEQ2WnRGN052S0MwCkQ1VVBmUEd5aE5IYitMU2pLZmtkOWJJQ0kyWGFoQWg4REwwWDczbzE4UlRacVBYUXRoMnJ3aENNdWtUK01ycUxpYWtMYk0yUVB1OHcKN3FLS3FvbXdWaWI5U0FWV3BkOEhWUVJZVGJxcm03WVRoU0JDeGZyT0tRblU5ZEc4dlFQbHYrZk14UWpjUEpFU09sTTczUlFCTGdxdgp1L1hBTCtJVWJ2Y2U1WW9hbld1T2tvS2pHU0hxL3ZhbVNoNzBiTEpMREVPWm9yRjlNU21JdXd2ZHJ5WVhRM0hlaU1BWVdOU3NVbUlnCnNYVzJ1R0RYbTJBZ3U1LzVTTU5vanhlazgvYzVJRVZDMExWM0xUKy9BeUxtRmNDRDZZekhoOEwrPC9YNTA5Q2VydGlmaWNhdGU+PC9YNTA5RGF0YT48L0tleUluZm8+PC9TaWduYXR1cmU+PC9LeWNSZXM+</kycRes></Resp>"); 
		
	
		
		
	//	KycRes esign = XMLUtils.deserialize(KycRes.class, Base64.decode(respXml));
		
	}
	
	
}
